{
  "address": "0x0B082543Ef388d30a54cDF0A68b07422916855f3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1OwnerAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "L1OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crossDomainMessenger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "forward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferL1Ownership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typeAndVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xd31a0c2d119a8116ca4b3bf7072075d46b88737a94916ded7122d1256824e676",
  "receipt": {
    "to": null,
    "from": "0x71C05a4eA5E9d5b1Ac87Bf962a043f5265d4Bdc8",
    "contractAddress": "0x0B082543Ef388d30a54cDF0A68b07422916855f3",
    "transactionIndex": 0,
    "gasUsed": "20241783",
    "logsBloom": "0x
    "blockHash": "0x25c1e139083b939fe6f1f0f254bfe6f790affcbd04526501a5c808dd91cbafc7",
    "transactionHash": "0xd31a0c2d119a8116ca4b3bf7072075d46b88737a94916ded7122d1256824e676",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4712142,
        "transactionHash": "0xd31a0c2d119a8116ca4b3bf7072075d46b88737a94916ded7122d1256824e676",
        "address": "0x0B082543Ef388d30a54cDF0A68b07422916855f3",
        "topics": [
          "0xb0121dbcab67289d5cb13a1f35ca086715f35ef418e0eda134c4145a086b6272",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000071c05a4ea5e9d5b1ac87bf962a043f5265d4bdc8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x25c1e139083b939fe6f1f0f254bfe6f790affcbd04526501a5c808dd91cbafc7"
      }
    ],
    "blockNumber": 4712142,
    "cumulativeGasUsed": "14873123",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x71C05a4eA5E9d5b1Ac87Bf962a043f5265d4Bdc8"],
  "solcInputHash": "33e3fe74e29e8cc877e23e8379a512a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1OwnerAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"L1OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossDomainMessenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferL1Ownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Any other L2 contract which uses this contract's address as a privileged position,   can be considered to be owned by the `l1Owner`\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"l1OwnerAddr\":\"the L1 owner address that will be allowed to call the forward fn\"}},\"crossDomainMessenger()\":{\"returns\":{\"_0\":\"xDomain messenger address (L2 `msg.sender`)\"}},\"forward(address,bytes)\":{\"details\":\"forwarded only if L2 Messenger calls with `xDomainMessageSender` beeing the L1 owner address\",\"params\":{\"data\":\"to send to target contract\",\"target\":\"contract address to be called\"}},\"l1Owner()\":{\"returns\":{\"_0\":\"L1 owner address\"}},\"transferL1Ownership(address)\":{\"details\":\"Forwarding can be disabled by setting the L1 owner as `address(0)`. Accessible only by owner.\",\"params\":{\"to\":\"new L1 owner that will be allowed to call the forward fn\"}}},\"title\":\"ArbitrumCrossDomainForwarder - L1 xDomain account representation\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"constructor\":{\"notice\":\"creates a new Arbitrum xDomain Forwarder contract\"},\"crossDomainMessenger()\":{\"notice\":\"The L2 xDomain `msg.sender`, generated from L1 sender address\"},\"forward(address,bytes)\":{\"notice\":\"forward calls the `target` with `data`\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferL1Ownership(address)\":{\"notice\":\"transfer ownership of this account to a new L1 owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"typeAndVersion()\":{\"notice\":\"versions: - ArbitrumCrossDomainForwarder 0.1.0: initial release\"}},\"notice\":\"L2 Contract which receives messages from a specific L1 address and transparently forwards them to the destination.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArbitrumCrossDomainForwarder.sol\":\"ArbitrumCrossDomainForwarder\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/ArbitrumCrossDomainForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/TypeAndVersionInterface.sol\\\";\\nimport \\\"./vendor/arb-bridge-eth/v0.8.0-custom/contracts/libraries/AddressAliasHelper.sol\\\";\\nimport \\\"./CrossDomainForwarder.sol\\\";\\n\\n/**\\n * @title ArbitrumCrossDomainForwarder - L1 xDomain account representation\\n * @notice L2 Contract which receives messages from a specific L1 address and transparently forwards them to the destination.\\n * @dev Any other L2 contract which uses this contract's address as a privileged position,\\n *   can be considered to be owned by the `l1Owner`\\n */\\ncontract ArbitrumCrossDomainForwarder is TypeAndVersionInterface, CrossDomainForwarder {\\n  /**\\n   * @notice creates a new Arbitrum xDomain Forwarder contract\\n   * @param l1OwnerAddr the L1 owner address that will be allowed to call the forward fn\\n   */\\n  constructor(address l1OwnerAddr) CrossDomainForwarder(l1OwnerAddr) {\\n    // noop\\n  }\\n\\n  /**\\n   * @notice versions:\\n   *\\n   * - ArbitrumCrossDomainForwarder 0.1.0: initial release\\n   *\\n   * @inheritdoc TypeAndVersionInterface\\n   */\\n  function typeAndVersion() external pure virtual override returns (string memory) {\\n    return \\\"ArbitrumCrossDomainForwarder 0.1.0\\\";\\n  }\\n\\n  /**\\n   * @notice The L2 xDomain `msg.sender`, generated from L1 sender address\\n   * @inheritdoc CrossDomainForwarder\\n   */\\n  function crossDomainMessenger() public view virtual override returns (address) {\\n    return AddressAliasHelper.applyL1ToL2Alias(l1Owner());\\n  }\\n\\n  /**\\n   * @dev forwarded only if L2 Messenger calls with `xDomainMessageSender` beeing the L1 owner address\\n   * @inheritdoc ForwarderInterface\\n   */\\n  function forward(address target, bytes memory data) external override {\\n    // 1. The call MUST come from the L2 Messenger (deterministically generated from the L1 xDomain sender address)\\n    require(msg.sender == crossDomainMessenger(), \\\"Sender is not the L2 messenger\\\");\\n    // 2. Make the external call\\n    (bool success, bytes memory res) = target.call(data);\\n    require(success, string(abi.encode(\\\"xDomain call failed:\\\", res)));\\n  }\\n}\\n\",\"keccak256\":\"0x10c9ebe472a38cc4b20917ccfb8649cc4c952f0632f9e4f733b43f912ad6d03f\",\"license\":\"MIT\"},\"contracts/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"contracts/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"contracts/CrossDomainForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwner.sol\\\";\\nimport \\\"./interfaces/ForwarderInterface.sol\\\";\\n\\n/**\\n * @title CrossDomainForwarder - L1 xDomain account representation\\n * @notice L2 Contract which receives messages from a specific L1 address and transparently forwards them to the destination.\\n * @dev Any other L2 contract which uses this contract's address as a privileged position,\\n *   can be considered to be owned by the `l1Owner`\\n */\\nabstract contract CrossDomainForwarder is ForwarderInterface, ConfirmedOwner {\\n  address private s_l1Owner;\\n\\n  event L1OwnershipTransferred(address indexed from, address indexed to);\\n\\n  /**\\n   * @notice creates a new xDomain Forwarder contract\\n   * @dev Forwarding can be disabled by setting the L1 owner as `address(0)`.\\n   * @param l1OwnerAddr the L1 owner address that will be allowed to call the forward fn\\n   */\\n  constructor(address l1OwnerAddr) ConfirmedOwner(msg.sender) {\\n    _setL1Owner(l1OwnerAddr);\\n  }\\n\\n  /// @return xDomain messenger address (L2 `msg.sender`)\\n  function crossDomainMessenger() public view virtual returns (address);\\n\\n  /// @return L1 owner address\\n  function l1Owner() public view virtual returns (address) {\\n    return s_l1Owner;\\n  }\\n\\n  /**\\n   * @notice transfer ownership of this account to a new L1 owner\\n   * @dev Forwarding can be disabled by setting the L1 owner as `address(0)`. Accessible only by owner.\\n   * @param to new L1 owner that will be allowed to call the forward fn\\n   */\\n  function transferL1Ownership(address to) external virtual onlyOwner {\\n    _setL1Owner(to);\\n  }\\n\\n  /// @notice internal method that stores the L1 owner\\n  function _setL1Owner(address to) internal {\\n    address from = s_l1Owner;\\n    if (from != to) {\\n      s_l1Owner = to;\\n      emit L1OwnershipTransferred(from, to);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xbb2ea87896b7cd9c6eb7338f51769efb96c981112cacf0a6784025c7c513d718\",\"license\":\"MIT\"},\"contracts/interfaces/ForwarderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title ForwarderInterface - forwards a call to a target, under some conditions\\ninterface ForwarderInterface {\\n  /**\\n   * @notice forward calls the `target` with `data`\\n   * @param target contract address to be called\\n   * @param data to send to target contract\\n   */\\n  function forward(address target, bytes memory data) external;\\n}\\n\",\"keccak256\":\"0xb9fe0193a4024d188b5c2abf4f35e913420295cf2c545a62dbf158873cfe2736\",\"license\":\"MIT\"},\"contracts/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"contracts/interfaces/TypeAndVersionInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract TypeAndVersionInterface {\\n  function typeAndVersion() external pure virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x805cc9a91d54db1bea60cb19f38364f1eac2735bddb3476294fb803c2f6b7097\",\"license\":\"MIT\"},\"contracts/vendor/arb-bridge-eth/v0.8.0-custom/contracts/libraries/AddressAliasHelper.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\n// NOTICE: pragma change from original (^0.6.11)\\npragma solidity ^0.8.0;\\n\\nlibrary AddressAliasHelper {\\n  uint160 constant offset = uint160(0x1111000000000000000000000000000000001111);\\n\\n  /// @notice Utility function that converts the msg.sender viewed in the L2 to the\\n  /// address in the L1 that submitted a tx to the inbox\\n  /// @param l1Address L2 address as viewed in msg.sender\\n  /// @return l2Address the address in the L1 that triggered the tx to L2\\n  function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\\n    unchecked {\\n      l2Address = address(uint160(l1Address) + offset);\\n    }\\n  }\\n\\n  /// @notice Utility function that converts the msg.sender viewed in the L2 to the\\n  /// address in the L1 that submitted a tx to the inbox\\n  /// @param l2Address L2 address as viewed in msg.sender\\n  /// @return l1Address the address in the L1 that triggered the tx to L2\\n  function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\\n    unchecked {\\n      l1Address = address(uint160(l2Address) - offset);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x08281cb161ef8f91fa1958a0021d0ac33a451489bd1f23ec8f57f47a7094cc12\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b1e380380610b1e83398101604081905261002f916101e2565b8033806000816100865760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156100b6576100b6816100cf565b5050506100c88161017960201b60201c565b5050610212565b6001600160a01b0381163314156101285760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161007d565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6002546001600160a01b0390811690821681146101de57600280546001600160a01b0319166001600160a01b0384811691821790925560405190918316907fb0121dbcab67289d5cb13a1f35ca086715f35ef418e0eda134c4145a086b627290600090a35b5050565b6000602082840312156101f457600080fd5b81516001600160a01b038116811461020b57600080fd5b9392505050565b6108fd806102216000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806396b8d7c01161005b57806396b8d7c014610107578063d2db63721461011a578063f2fde38b14610138578063f43b36131461014b57600080fd5b8063181f5a771461008d5780636fadcf72146100ab57806379ba5097146100c05780638da5cb5b146100c8575b600080fd5b610095610153565b6040516100a291906107ec565b60405180910390f35b6100be6100b93660046106a6565b610173565b005b6100be6102e3565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a2565b6100be610115366004610684565b6103e0565b60025473ffffffffffffffffffffffffffffffffffffffff166100e2565b6100be610146366004610684565b6103f4565b6100e2610405565b60606040518060600160405280602281526020016108a660229139905090565b61017b610405565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f53656e646572206973206e6f7420746865204c32206d657373656e676572000060448201526064015b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168360405161023c91906107d0565b6000604051808303816000865af19150503d8060008114610279576040519150601f19603f3d011682016040523d82523d6000602084013e61027e565b606091505b5091509150818160405160200161029591906107ff565b604051602081830303815290604052906102dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020b91906107ec565b5050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015260640161020b565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6103e8610447565b6103f1816104ca565b50565b6103fc610447565b6103f181610565565b600061044261042960025473ffffffffffffffffffffffffffffffffffffffff1690565b7311110000000000000000000000000000000011110190565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161020b565b565b60025473ffffffffffffffffffffffffffffffffffffffff908116908216811461056157600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84811691821790925560405190918316907fb0121dbcab67289d5cb13a1f35ca086715f35ef418e0eda134c4145a086b627290600090a35b5050565b73ffffffffffffffffffffffffffffffffffffffff81163314156105e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161020b565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b803573ffffffffffffffffffffffffffffffffffffffff8116811461067f57600080fd5b919050565b60006020828403121561069657600080fd5b61069f8261065b565b9392505050565b600080604083850312156106b957600080fd5b6106c28361065b565b9150602083013567ffffffffffffffff808211156106df57600080fd5b818501915085601f8301126106f357600080fd5b81358181111561070557610705610876565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561074b5761074b610876565b8160405282815288602084870101111561076457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000815180845261079e816020860160208601610846565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082516107e2818460208701610846565b9190910192915050565b60208152600061069f6020830184610786565b60408152601460408201527f78446f6d61696e2063616c6c206661696c65643a000000000000000000000000606082015260806020820152600061069f6080830184610786565b60005b83811015610861578181015183820152602001610849565b83811115610870576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe417262697472756d43726f7373446f6d61696e466f7277617264657220302e312e30a26469706673582212200b128c0ebbebb711e18b4d454461f459f765827240164c17f15f1573d7f6186064736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806396b8d7c01161005b57806396b8d7c014610107578063d2db63721461011a578063f2fde38b14610138578063f43b36131461014b57600080fd5b8063181f5a771461008d5780636fadcf72146100ab57806379ba5097146100c05780638da5cb5b146100c8575b600080fd5b610095610153565b6040516100a291906107ec565b60405180910390f35b6100be6100b93660046106a6565b610173565b005b6100be6102e3565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a2565b6100be610115366004610684565b6103e0565b60025473ffffffffffffffffffffffffffffffffffffffff166100e2565b6100be610146366004610684565b6103f4565b6100e2610405565b60606040518060600160405280602281526020016108a660229139905090565b61017b610405565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f53656e646572206973206e6f7420746865204c32206d657373656e676572000060448201526064015b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168360405161023c91906107d0565b6000604051808303816000865af19150503d8060008114610279576040519150601f19603f3d011682016040523d82523d6000602084013e61027e565b606091505b5091509150818160405160200161029591906107ff565b604051602081830303815290604052906102dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020b91906107ec565b5050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015260640161020b565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6103e8610447565b6103f1816104ca565b50565b6103fc610447565b6103f181610565565b600061044261042960025473ffffffffffffffffffffffffffffffffffffffff1690565b7311110000000000000000000000000000000011110190565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161020b565b565b60025473ffffffffffffffffffffffffffffffffffffffff908116908216811461056157600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84811691821790925560405190918316907fb0121dbcab67289d5cb13a1f35ca086715f35ef418e0eda134c4145a086b627290600090a35b5050565b73ffffffffffffffffffffffffffffffffffffffff81163314156105e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161020b565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b803573ffffffffffffffffffffffffffffffffffffffff8116811461067f57600080fd5b919050565b60006020828403121561069657600080fd5b61069f8261065b565b9392505050565b600080604083850312156106b957600080fd5b6106c28361065b565b9150602083013567ffffffffffffffff808211156106df57600080fd5b818501915085601f8301126106f357600080fd5b81358181111561070557610705610876565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561074b5761074b610876565b8160405282815288602084870101111561076457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000815180845261079e816020860160208601610846565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082516107e2818460208701610846565b9190910192915050565b60208152600061069f6020830184610786565b60408152601460408201527f78446f6d61696e2063616c6c206661696c65643a000000000000000000000000606082015260806020820152600061069f6080830184610786565b60005b83811015610861578181015183820152602001610849565b83811115610870576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe417262697472756d43726f7373446f6d61696e466f7277617264657220302e312e30a26469706673582212200b128c0ebbebb711e18b4d454461f459f765827240164c17f15f1573d7f6186064736f6c63430008060033",
  "devdoc": {
    "details": "Any other L2 contract which uses this contract's address as a privileged position,   can be considered to be owned by the `l1Owner`",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "l1OwnerAddr": "the L1 owner address that will be allowed to call the forward fn"
        }
      },
      "crossDomainMessenger()": {
        "returns": {
          "_0": "xDomain messenger address (L2 `msg.sender`)"
        }
      },
      "forward(address,bytes)": {
        "details": "forwarded only if L2 Messenger calls with `xDomainMessageSender` beeing the L1 owner address",
        "params": {
          "data": "to send to target contract",
          "target": "contract address to be called"
        }
      },
      "l1Owner()": {
        "returns": {
          "_0": "L1 owner address"
        }
      },
      "transferL1Ownership(address)": {
        "details": "Forwarding can be disabled by setting the L1 owner as `address(0)`. Accessible only by owner.",
        "params": {
          "to": "new L1 owner that will be allowed to call the forward fn"
        }
      }
    },
    "title": "ArbitrumCrossDomainForwarder - L1 xDomain account representation",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "constructor": {
        "notice": "creates a new Arbitrum xDomain Forwarder contract"
      },
      "crossDomainMessenger()": {
        "notice": "The L2 xDomain `msg.sender`, generated from L1 sender address"
      },
      "forward(address,bytes)": {
        "notice": "forward calls the `target` with `data`"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferL1Ownership(address)": {
        "notice": "transfer ownership of this account to a new L1 owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      },
      "typeAndVersion()": {
        "notice": "versions: - ArbitrumCrossDomainForwarder 0.1.0: initial release"
      }
    },
    "notice": "L2 Contract which receives messages from a specific L1 address and transparently forwards them to the destination.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 112,
        "contract": "contracts/ArbitrumCrossDomainForwarder.sol:ArbitrumCrossDomainForwarder",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 114,
        "contract": "contracts/ArbitrumCrossDomainForwarder.sol:ArbitrumCrossDomainForwarder",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 277,
        "contract": "contracts/ArbitrumCrossDomainForwarder.sol:ArbitrumCrossDomainForwarder",
        "label": "s_l1Owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}
